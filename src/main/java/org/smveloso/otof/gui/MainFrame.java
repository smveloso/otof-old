package org.smveloso.otof.gui;

import java.io.File;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.hibernate.id.GUIDGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.smveloso.otof.facade.FacadeException;
import org.smveloso.otof.facade.ServiceFacade;
import org.smveloso.otof.model.Album;
import org.smveloso.otof.model.LocalFileSystemAlbum;
import org.smveloso.otof.gui.tablemodel.AlbumListTableModel;

/**
 *
 * @author sergiomv
 */
public class MainFrame extends javax.swing.JFrame {

    private static final Logger logger = LoggerFactory.getLogger(MainFrame.class);

    private MainFrameState state;
    
    private ServiceFacade serviceFacade;
    
    private AlbumListTableModel albumListTableModel;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        logger.debug(">>> MainFrame()");
        initLookAndFeel();
        beforeInitComponents();
        initComponents();
        afterInitComponents();
    }

    private void beforeInitComponents() {
        logger.debug(">>> beforeInitComponents()");
        serviceFacade = ServiceFacade.getInstance();
        this.state = new MainFrameState();
        this.albumListTableModel = new AlbumListTableModel();
        this.albumListTableModel.associateToState(state);
    }
    
    private void afterInitComponents() {
        logger.debug(">>> afterInitComponents()");
        this.tableAlbums.getSelectionModel().addListSelectionListener(albumListSelectionListener);
    }
    
    public AlbumListTableModel getAlbumListTableModel() {
        return albumListTableModel;
    }

    private MainFrameState getMainFrameState() {
        return this.state;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabpnlMain = new javax.swing.JTabbedPane();
        pnlSearch = new javax.swing.JPanel();
        pnlAlbumTab = new javax.swing.JPanel();
        pnlAlbumFotos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        pnlAlbums = new javax.swing.JPanel();
        scrollTableAlbums = new javax.swing.JScrollPane();
        tableAlbums = new javax.swing.JTable();
        btnOpNovoAlbum = new javax.swing.JButton();
        btnOpRemoverAlbum = new javax.swing.JButton();
        btnOpUpdateAlbum = new javax.swing.JButton();
        pnlHouseKeeping = new javax.swing.JPanel();
        pnlBottom = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OTOF");

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1027, Short.MAX_VALUE)
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        tabpnlMain.addTab("Search", pnlSearch);

        pnlAlbumFotos.setBorder(javax.swing.BorderFactory.createTitledBorder("Fotos"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 242, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlAlbumFotosLayout = new javax.swing.GroupLayout(pnlAlbumFotos);
        pnlAlbumFotos.setLayout(pnlAlbumFotosLayout);
        pnlAlbumFotosLayout.setHorizontalGroup(
            pnlAlbumFotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlbumFotosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAlbumFotosLayout.setVerticalGroup(
            pnlAlbumFotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlbumFotosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAlbumFotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAlbums.setBorder(javax.swing.BorderFactory.createTitledBorder("Albums"));

        tableAlbums.setModel(getAlbumListTableModel());
        tableAlbums.setName("tableAlbums"); // NOI18N
        tableAlbums.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollTableAlbums.setViewportView(tableAlbums);

        btnOpNovoAlbum.setText("Novo");
        btnOpNovoAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpNovoAlbumActionPerformed(evt);
            }
        });

        btnOpRemoverAlbum.setText("Remover");

        btnOpUpdateAlbum.setText("Sincronizar");
        btnOpUpdateAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpUpdateAlbumActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAlbumsLayout = new javax.swing.GroupLayout(pnlAlbums);
        pnlAlbums.setLayout(pnlAlbumsLayout);
        pnlAlbumsLayout.setHorizontalGroup(
            pnlAlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlbumsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTableAlbums, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAlbumsLayout.createSequentialGroup()
                        .addComponent(btnOpNovoAlbum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpRemoverAlbum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpUpdateAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlAlbumsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnOpNovoAlbum, btnOpRemoverAlbum, btnOpUpdateAlbum});

        pnlAlbumsLayout.setVerticalGroup(
            pnlAlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlbumsLayout.createSequentialGroup()
                .addComponent(scrollTableAlbums, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpNovoAlbum)
                    .addComponent(btnOpRemoverAlbum)
                    .addComponent(btnOpUpdateAlbum))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAlbumTabLayout = new javax.swing.GroupLayout(pnlAlbumTab);
        pnlAlbumTab.setLayout(pnlAlbumTabLayout);
        pnlAlbumTabLayout.setHorizontalGroup(
            pnlAlbumTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlbumTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAlbumTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlAlbumFotos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlAlbums, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAlbumTabLayout.setVerticalGroup(
            pnlAlbumTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlbumTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAlbums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAlbumFotos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpnlMain.addTab("Album", pnlAlbumTab);

        javax.swing.GroupLayout pnlHouseKeepingLayout = new javax.swing.GroupLayout(pnlHouseKeeping);
        pnlHouseKeeping.setLayout(pnlHouseKeepingLayout);
        pnlHouseKeepingLayout.setHorizontalGroup(
            pnlHouseKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1027, Short.MAX_VALUE)
        );
        pnlHouseKeepingLayout.setVerticalGroup(
            pnlHouseKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        tabpnlMain.addTab("Limpeza", pnlHouseKeeping);

        pnlBottom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnClose.setText("Close Window");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBottomLayout = new javax.swing.GroupLayout(pnlBottom);
        pnlBottom.setLayout(pnlBottomLayout);
        pnlBottomLayout.setHorizontalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBottomLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBottomLayout.setVerticalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBottomLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpnlMain)
            .addComponent(pnlBottom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabpnlMain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        actionFechar();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnOpUpdateAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpUpdateAlbumActionPerformed
        actionIniciarAtualizacaoAlbum();
    }//GEN-LAST:event_btnOpUpdateAlbumActionPerformed

    private void btnOpNovoAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpNovoAlbumActionPerformed
        List<Album> newAlbumList = new ArrayList<>();
        LocalFileSystemAlbum a;
        
        for (int k=0;k<10;++k) {
            a = new LocalFileSystemAlbum();
            a.setId((long) k); a.setName("ALBUM_" + k); a.setServerSide(false);a.setMountPointAsString("/var/opt/album_" + k);
            newAlbumList.add(a);
        }
        getMainFrameState().setAlbumList(newAlbumList);
    }//GEN-LAST:event_btnOpNovoAlbumActionPerformed

    //
    // ACTIONS
    //
    
    private void actionFechar() {
        this.setVisible(false);
        this.dispose();
    }
    
    private void actionIniciarAtualizacaoAlbum() {
                
        try {
            //TODO validações ...
//            String baseDir = txtOpUpdateAlbumBaseDir.getText();
//            String albumName = txtOpUpdateAlbumName.getText();
            String baseDir = "foo";
            String albumName = "foobar";
            Album album = serviceFacade.getAlbumByName(albumName);
            if (null == album) {
                logger.debug("album will be created: %s",albumName);
                album = serviceFacade.newLocalFileSystemAlbum(albumName, baseDir);
            }
            logger.debug("calling serviceFacade to performAlbumUpdate ...");
            serviceFacade.performAlbumUpdate(album);
        } catch (FacadeException e) {
            String msg = e.getMessage();
            JOptionPane.showMessageDialog(this,msg,"Houve um erro",JOptionPane.ERROR_MESSAGE);
        /*
        } catch (InterruptedException | ExecutionException e) {
            //throw new FacadeException("Job interrupted or failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this,e.getMessage(),"Houve um erro",JOptionPane.ERROR_MESSAGE);
        */ 
        } finally {
            
        }

    }
    
    private void actionVarreduraEscolherDiretorioBase() {
        File baseDir = guiEscolheDiretorio();
        if (null != baseDir) {            
            if (baseDir.exists() && baseDir.isDirectory()) {
                //txtOpUpdateAlbumBaseDir.setText(baseDir.getAbsolutePath());
            } else {
                guiMostraAviso("Diretório não encontrado.");
            }
        }
    }
    
    //
    // GUI STUFF
    //
    
    private File guiEscolheDiretorio() {
        File arquivo = null;
        JFileChooser chooser = new JFileChooser(new File(System.getProperty("user.dir")));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int op = chooser.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION) {
            arquivo = chooser.getSelectedFile();
        }
        return arquivo;
    }
    
    private File guiEscolheArquivo() {
        File arquivo = null;
        JFileChooser chooser = new JFileChooser(new File(System.getProperty("user.dir")));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int op = chooser.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION) {
            arquivo = chooser.getSelectedFile();
        }
        return arquivo;
    }
    
    
    private void guiMostraAviso(String texto) {
        JOptionPane.showMessageDialog(this, texto, "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private String initLookAndFeel() {
        //log.trace(">> initLookAndFeel()");
        String lafName = UIManager.getLookAndFeel().getName();

        try {
            String systemLafName = UIManager.getSystemLookAndFeelClassName();
            //log.debug("Trying system laf: " + systemLafName);
            UIManager.setLookAndFeel(systemLafName);
        } catch (Exception e) {
            //log.warn("Could not set the LAF to native: " + e.getMessage());
        }

        //log.debug("Using LAF: " + UIManager.getLookAndFeel().getName());
        //log.trace("<< initLookAndFeel()");
        return lafName;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOpNovoAlbum;
    private javax.swing.JButton btnOpRemoverAlbum;
    private javax.swing.JButton btnOpUpdateAlbum;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel pnlAlbumFotos;
    private javax.swing.JPanel pnlAlbumTab;
    private javax.swing.JPanel pnlAlbums;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlHouseKeeping;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JScrollPane scrollTableAlbums;
    private javax.swing.JTable tableAlbums;
    private javax.swing.JTabbedPane tabpnlMain;
    // End of variables declaration//GEN-END:variables

    ListSelectionListener albumListSelectionListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            logger.trace(">>> albumListSelectionListener.valueChanged(...)");
            logger.trace("Adjusting ?" + e.getValueIsAdjusting());
            logger.trace("First     : " + e.getFirstIndex());
            logger.trace("Last      : " + e.getLastIndex());                 
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            logger.trace("CLASS IS: " + lsm.getClass().toString());
            logger.trace("MIN  : " + lsm.getMinSelectionIndex());
            logger.trace("MAX  : " + lsm.getMaxSelectionIndex());
            logger.trace("MODE : " + lsm.getSelectionMode());
            // expect single-selection mode
            if (lsm.getSelectionMode() == ListSelectionModel.SINGLE_SELECTION) {
                if (!e.getValueIsAdjusting()) {
                    int index = lsm.getMinSelectionIndex();
                    if (lsm.isSelectedIndex(index)) {
                        //TODO what about table sorting ?
                        getMainFrameState().setCurrentAlbumIndex(index);
                    }
                }
            }
        }
    };

}
